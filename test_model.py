from model import model
from hypothesis import given
from hypothesis import strategies as st
import pytest
import numpy as np

#===========================
#PROPERTY TESTING 
#===========================

#The @given decorator 
#takes the test function and turns it 
#into a parametrized one which, when called, will run the test function 
#over a wide range of matching data from the defined strategy 'st'

#Hypothesis provides strategies 'st'
#that generate values for most built-in types 
#with arguments to constrain or adjust the output


#generate good variables (k float, k > 0, N >=0) 
#for the input of 'model' function and for the input of the test function
@given(k = st.floats(min_value = 0,exclude_min = True), N = st.floats(min_value = 0), t = st.floats(min_value = 0))
def test_good_values_h(N,k,t):
    """positive test that check if the 'model' function 
    returns a float value
    with good input parameters
    """
    # check if the 'model' function returns a float value 
    # with the parameters generated by the decorator @given
    assert isinstance(model(N,t,k) , float) 


#generate variables with k a string
#for the input of 'model' function and for the input of the test function
@given(k = st.text(), N = st.floats(min_value = 0), t = st.floats(min_value = 0))
def test_TypeError_k_h(N,k,t):
    """test that check if the 'model' function raises a TypeError
    when k is not a float value
    """
    # check if the 'model' function raises a TypeError 
    # with the parameters generated by the decorator @given
    with pytest.raises(TypeError):
         model(N,t,k)


#generate variables with N smaller than 0
#for the input of 'model' function and for the input of the test function
@given(k = st.floats(min_value = 0,exclude_min = True), N = st.floats(max_value = 0, exclude_max = True), t = st.floats(min_value = 0))
def test_ValueError_N_h(N,k,t):
    """test that check if the 'model' function raises a ValueError
    when N is smaller than 0
    """
    # check if the 'model' function raises a ValueError
    # with the parameters generated by the decorator @given
    with pytest.raises(ValueError):
         model(N,t,k)


#generate variables with k <= 0
#for the input of 'model' function and for the input of the test function
@given(k = st.floats(max_value = 0),  N = st.floats(min_value = 0), t = st.floats(min_value = 0))
def test_ValueError_k_h(N,k,t):
    """test that check if the 'model' function raises a ValueError
    when k <= 0
    """
    # check if the 'model' function raises a ValueError
    # with the parameters generated by the decorator @given
    with pytest.raises(ValueError):
         model(N,t,k)


#===========================
#UNIT TESTING 
#all the possible positive and negative combinations
#===========================

def test_k_float(): 
    """positive test that check if the 'model' function works 
    when k is a float value
    """
    #define variables for the input of 'model' function with k decimal
    k = 1.5
    N = 5
    t = 2
    # check if the 'model' function returns -7.5 with the previous parameters
    assert model(N,t,k) == -7.5

def test_k_float_2(): 
    """positive test that check if the 'model' function works 
    when k is a float value
    """
    #define variables for the input of 'model' function with k integer
    k = 1e3
    N = 5
    t = 2
    # check if the 'model' function returns -5e3 with the previous parameters
    assert model(N,t,k) == -5e3  
    
def test_N_positive():
    """positive test that check if the 'model' function works 
    when N is positive
    """
    #define variables for the input of 'model' function with N positive
    k = 1.5
    N = 5
    t = 2
    # check if the 'model' function returns -7.5 with the previous parameters
    assert model(N,t,k) == -7.5 
    
def test_N_0():
    """positive test that check if the 'model' function works 
    when N is zero
    """
    #define variables for the input of 'model' function with N = 0
    k = 1.5
    N = 0
    t = 2
    # check if the 'model' function returns -7.5 with the previous parameters
    assert model(N,t,k) == 0       

def test_k_positive(): 
    """positive test that check if the 'model' function works 
    when k is positive
    """
    #define variables for the input of 'model' function with k positive
    k = 1.5
    N = 5
    t = 2
    # check if the 'model' function returns -7.5 with the previous parameters
    assert model(N,t,k) == -7.5    

def test_TypeError_k():
    """test that check if the 'model' function raises a TypeError
    when k is not a float value
    """
    #define variables for the input of 'model' function with k a np.array
    k = np.linspace(0,1)
    N = 5
    t = 2  
    # check if the 'model' function raises a TypeError with the previous parameters
    with pytest.raises(TypeError):
         model(N,t,k)

def test_ValueError_N():
    """test that check if the 'model' function raises a ValueError
    when N is negative
    """
    #define variables for the input of 'model' function with N negative
    k = 1.5
    N = -5
    t = 2   
    # check if the 'model' function raises a ValueError with the previous parameters
    with pytest.raises(ValueError):
        model(N,t,k)

def test_ValueError_k():
    """test that check if the 'model' function raises a ValueError
    when k is not greater than 0
    """
    #define variables for the input of 'model' function with k smaller than 0
    k = -1.5
    N = 5
    t = 2   
    # check if the 'model' function raises a ValueError with the previous parameters
    with pytest.raises(ValueError):
        model(N,t,k)

def test_zero_ValueError_k():
    """test that check if the 'model' function raises a ValueError
    when k is equal to 0
    """
    #define variables for the input of 'model' function with k = 0
    k = 0.0
    N = 5
    t = 2 
    # check if the 'model' function raises a ValueError with the previous parameters
    with pytest.raises(ValueError):
        model(N,t,k)
        
def test_result_float(): 
    """positive test that check if the 'model' function 
    returns a float value
    """
    #define good variables for the input of 'model' function (k float, k > 0, N >=0 )
    k = 1.5
    N = 5
    t = 2
    # check if the 'model' function returns a float value with the previous parameters
    assert isinstance(model(N,t,k) , float)       
